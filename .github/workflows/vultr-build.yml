# .github/workflows/vultr-build.yml
name: Build on Vultr

on:
  push:
    tags:
      - 'v*'  # e.g., v1.0.0

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      # Authentication for vultr-cli per official docs
      VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract tag
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install prerequisites
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl tar openssh-client

      - name: Install Vultr CLI
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/vultr/vultr-cli/releases/latest | jq -r '.tag_name')  # e.g. v3.3.0
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')   # linux/darwin
          ARCH=$(uname -m)
          case $ARCH in
            x86_64) ARCH=amd64 ;;
            aarch64) ARCH=arm64 ;;
          esac
          URL="https://github.com/vultr/vultr-cli/releases/download/${LATEST_VERSION}/vultr-cli_${LATEST_VERSION}_${OS}_${ARCH}.tar.gz"
          echo "Downloading $URL"
          curl -L "$URL" -o /tmp/vultr-cli.tgz
          tar -xzf /tmp/vultr-cli.tgz -C /tmp
          BIN=$(find /tmp -maxdepth 1 -type f -name 'vultr-cli*' | head -n1)
          sudo mv "$BIN" /usr/local/bin/vultr-cli
          sudo chmod +x /usr/local/bin/vultr-cli
          vultr-cli version

      - name: Generate ephemeral SSH keypair
        id: ssh_key
        run: |
          ssh-keygen -t ed25519 -N "" -f id_ed25519
          chmod 600 id_ed25519
          echo "ssh_pub=$(cat id_ed25519.pub)" >> $GITHUB_OUTPUT

      - name: Register SSH public key in Vultr
        id: add_ssh
        run: |
          KEY_NAME="gha-${{ steps.extract_tag.outputs.tag }}-$(date +%s)"
          KEY_ID=$(vultr-cli ssh-key create --name "$KEY_NAME" --key "${{ steps.ssh_key.outputs.ssh_pub }}" -o json | jq -r '.id')
          echo "ssh_key_id=$KEY_ID" >> $GITHUB_OUTPUT

      - name: Create cloud-init user-data
        run: |
          cat > startup-userdata.sh << 'EOF'
          #!/bin/bash
          set -euxo pipefail
          apt-get update && apt-get upgrade -y
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          apt-get install -y git
          touch /tmp/setup-complete
          EOF

      - name: Create Vultr instance (Ubuntu 22.04, dynamic OS lookup)
        id: create_instance
        run: |
          # Discover Ubuntu 22.04 x64 OS ID dynamically
          OS_ID=$(vultr-cli os list -o json \
            | jq -r '.[] | select((.name | test("Ubuntu 22\\.04"; "i")) and (.arch == "x64")) | .id' \
            | head -n1)

          if [ -z "$OS_ID" ]; then
            echo "Could not find Ubuntu 22.04 x64 in OS catalog. Aborting."
            exit 1
          fi
          echo "Using OS_ID=$OS_ID (Ubuntu 22.04 x64)"

          # Ensure plan exists (adjust if needed)
          PLAN_ID="voc-c-16c-32gb-300s"
          if ! vultr-cli plans list -o json | jq -e --arg p "$PLAN_ID" '.[] | select(.id == $p)' > /dev/null; then
            echo "Plan $PLAN_ID not found. Run 'vultr-cli plans list' to choose a valid plan."
            exit 1
          fi

          USERDATA=$(< ./startup-userdata.sh)

          INSTANCE_JSON=$(vultr-cli instance create \
            --region fra \
            --plan "$PLAN_ID" \
            --os "$OS_ID" \
            --ssh-keys "${{ steps.add_ssh.outputs.ssh_key_id }}" \
            --label "build-${{ steps.extract_tag.outputs.tag }}" \
            --userdata "$USERDATA" \
            -o json)

          echo "$INSTANCE_JSON"
          INSTANCE_ID=$(echo "$INSTANCE_JSON" | jq -r '.id')
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "Created instance: $INSTANCE_ID"

      - name: Wait for instance to be ready & fetch IP
        id: wait_instance
        timeout-minutes: 15
        run: |
          INSTANCE_ID=${{ steps.create_instance.outputs.instance_id }}

          # Wait until instance is active
          until [ "$(vultr-cli instance get "$INSTANCE_ID" -o json | jq -r '.status')" = "active" ]; do
            echo "Waiting for instance to become active..."
            sleep 10
          done

          IP_ADDRESS=$(vultr-cli instance get "$INSTANCE_ID" -o json | jq -r '.main_ip')
          echo "ip_address=$IP_ADDRESS" >> $GITHUB_OUTPUT
          echo "Instance IP: $IP_ADDRESS"

          # Wait for cloud-init completion marker
          for i in $(seq 1 60); do
            if ssh -i id_ed25519 -o StrictHostKeyChecking=no -o ConnectTimeout=5 root@"$IP_ADDRESS" "test -f /tmp/setup-complete" 2>/dev/null; then
              echo "Startup script completed!"
              exit 0
            fi
            echo "[$i/60] setup not complete yet..."
            sleep 10
          done

          echo "Setup did not complete in time" >&2
          exit 1

      - name: Build and push Docker image on the instance (tag only)
        run: |
          IP=${{ steps.wait_instance.outputs.ip_address }}

          cat > build-script.sh << 'EOF'
          #!/usr/bin/env bash
          set -euxo pipefail

          git clone https://github.com/${{ github.repository }}.git /tmp/repo
          cd /tmp/repo
          git checkout ${{ steps.extract_tag.outputs.tag }}

          echo "$REGISTRY_PASSWORD" | docker login registry.hearmemanai.xyz -u "$REGISTRY_USERNAME" --password-stdin

          docker build \
            --build-arg CIVITAI_TOKEN="$CIVITAI_TOKEN" \
            -t registry.hearmemanai.xyz/${{ github.event.repository.name }}:${{ steps.extract_tag.outputs.tag }} .

          docker push registry.hearmemanai.xyz/${{ github.event.repository.name }}:${{ steps.extract_tag.outputs.tag }}
          EOF

          scp -i id_ed25519 -o StrictHostKeyChecking=no build-script.sh root@"$IP":/tmp/
          ssh -i id_ed25519 -o StrictHostKeyChecking=no root@"$IP" \
            "REGISTRY_USERNAME='${{ secrets.REGISTRY_USERNAME }}' REGISTRY_PASSWORD='${{ secrets.REGISTRY_PASSWORD }}' CIVITAI_TOKEN='${{ secrets.CIVITAI_TOKEN }}' bash /tmp/build-script.sh"

      - name: Cleanup - Delete Vultr instance and SSH key
        if: always()
        run: |
          if [ -n "${{ steps.create_instance.outputs.instance_id }}" ]; then
            echo "Deleting instance ${{ steps.create_instance.outputs.instance_id }}"
            vultr-cli instance delete ${{ steps.create_instance.outputs.instance_id }} --force || true
          fi
          if [ -n "${{ steps.add_ssh.outputs.ssh_key_id }}" ]; then
            echo "Deleting SSH key ${{ steps.add_ssh.outputs.ssh_key_id }}"
            vultr-cli ssh-key delete ${{ steps.add_ssh.outputs.ssh_key_id }} || true
          fi
