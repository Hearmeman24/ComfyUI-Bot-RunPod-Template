# .github/workflows/vultr-build.yml
name: Build on Vultr

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract tag
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install Vultr CLI
        run: |
          # Get the latest release version
          LATEST_VERSION=$(curl -s https://api.github.com/repos/vultr/vultr-cli/releases/latest | jq -r '.tag_name')
          
          # Construct the download URL with correct format
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          # Map architecture names to match release files
          case $ARCH in
            x86_64) ARCH="amd64" ;;
            aarch64) ARCH="arm64" ;;
          esac
          
          # Download and extract
          curl -L "https://github.com/vultr/vultr-cli/releases/download/${LATEST_VERSION}/vultr-cli_${LATEST_VERSION}_${OS}_${ARCH}.tar.gz" | tar -xz
          sudo mv vultr-cli /usr/local/bin/
          vultr-cli version

      - name: Configure Vultr CLI
        run: |
          vultr-cli configure set api-key ${{ secrets.VULTR_API_KEY }}

      - name: Create startup script
        run: |
          cat > startup-script.sh << 'EOF'
          #!/bin/bash
          # Update system
          apt-get update && apt-get upgrade -y
          
          # Install Docker
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          usermod -aG docker root
          
          # Install git
          apt-get install -y git
          
          # Signal that setup is complete
          touch /tmp/setup-complete
          EOF

      - name: Create Vultr instance
        id: create_instance
        run: |
          # Create instance with startup script
          INSTANCE_ID=$(vultr-cli instance create \
            --region fra \
            --plan voc-c-16c-32gb-300s \
            --os 387 \
            --label "build-${{ steps.extract_tag.outputs.tag }}" \
            --startup-script-file startup-script.sh \
            --output json | jq -r '.id')
          
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "Created instance: $INSTANCE_ID"

      - name: Wait for instance to be ready
        run: |
          echo "Waiting for instance to be active and startup script to complete..."
          
          # Wait for instance to be active
          while true; do
            STATUS=$(vultr-cli instance get ${{ steps.create_instance.outputs.instance_id }} -o json | jq -r '.status')
            echo "Instance status: $STATUS"
            
            if [ "$STATUS" = "active" ]; then
              echo "Instance is active!"
              break
            fi
            
            sleep 10
          done
          
          # Get IP address
          IP_ADDRESS=$(vultr-cli instance get ${{ steps.create_instance.outputs.instance_id }} -o json | jq -r '.main_ip')
          echo "Instance IP: $IP_ADDRESS"
          echo "ip_address=$IP_ADDRESS" >> $GITHUB_ENV
          
          # Wait for startup script completion and SSH to be ready
          echo "Waiting for startup script to complete..."
          for i in {1..60}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 root@$IP_ADDRESS "test -f /tmp/setup-complete" 2>/dev/null; then
              echo "Startup script completed!"
              break
            fi
            echo "Attempt $i/60: Setup not complete, waiting..."
            sleep 10
          done

      - name: Build and push Docker image
        run: |
          # Create a temporary script to run on the Vultr instance
          cat > build-script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git /tmp/repo
          cd /tmp/repo
          git checkout ${{ steps.extract_tag.outputs.tag }}
          
          # Login to registry
          echo "$REGISTRY_PASSWORD" | docker login registry.hearmemanai.xyz -u "$REGISTRY_USERNAME" --password-stdin
          
          # Build image with tag and build args
          docker build \
            --build-arg CIVITAI_TOKEN="$CIVITAI_TOKEN" \
            -t registry.hearmemanai.xyz/${{ github.event.repository.name }}:${{ steps.extract_tag.outputs.tag }} .
          
          # Push both tags
          docker push registry.hearmemanai.xyz/${{ github.event.repository.name }}:${{ steps.extract_tag.outputs.tag }}
          
          echo "Build and push completed successfully!"
          EOF
          
          # Copy and execute the build script on the instance
          scp -o StrictHostKeyChecking=no build-script.sh root@${{ env.ip_address }}:/tmp/
          ssh -o StrictHostKeyChecking=no root@${{ env.ip_address }} \
            "REGISTRY_USERNAME='${{ secrets.REGISTRY_USERNAME }}' REGISTRY_PASSWORD='${{ secrets.REGISTRY_PASSWORD }}' bash /tmp/build-script.sh"

      - name: Cleanup - Delete Vultr instance
        if: always()  # This ensures cleanup happens even if previous steps fail
        run: |
          if [ -n "${{ steps.create_instance.outputs.instance_id }}" ]; then
            echo "Deleting instance ${{ steps.create_instance.outputs.instance_id }}"
            vultr-cli instance delete ${{ steps.create_instance.outputs.instance_id }} --force
            echo "Instance deleted successfully"
          else
            echo "No instance ID found, nothing to cleanup"
          fi